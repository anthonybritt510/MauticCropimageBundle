<?php

/*
 * @copyright   2019 Jovan Marcovic. All rights reserved
 * @author      Jovan Marcovic
 * @license     GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 */

namespace MauticPlugin\MauticCropimageBundle\Controller;

use Mautic\CoreBundle\Controller\CommonController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;

class DefaultController extends CommonController
{
    /**
     *
     * @param Request $request
     *
     */
    public function uploadAction(Request $request)
    {
        $croppedImageFile = $request->files->get('croppedImage');

        $uploadFileName = $this->generateUniqueFileName().'.'.$croppedImageFile->guessExtension();

        $subfolderString = date('Y/m/');
        $uploadForlderString = __DIR__ . '/../../../media/images/cropped_images/' . $subfolderString;
        
        try {
            $croppedImageFile->move(
                $uploadForlderString,
                $uploadFileName
            );
        } catch (FileException $e) {
            // ... handle exception if something happens during file upload
        }

        $response = new JsonResponse(array('name' => $subfolderString . $uploadFileName));
        return $response;
    }

    public function getmessageAction(Request $request)
    {
        $message1 = $this->get('translator')->trans('mautic.form.submission.error.file.extension', [], 'validators');
        $message2 = $this->get('translator')->trans('mautic.form.submission.error.file.size', [], 'validators');
        $domainAddress = $request->isSecure() ? 'https://'. $request->server->get('HTTP_HOST') : 'http://'. $request->server->get('HTTP_HOST');

        $response = new JsonResponse(array('ext'=> $message1, 'size'=> $message2, 'domain'=>$domainAddress));
        return $response;
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
